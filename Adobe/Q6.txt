// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
vector<string> AllParenthesis(int n) ;


 // } Driver Code Ends
//User function Template for C++

// N is the number of pairs of parentheses
// Return list of all combinations of balanced parantheses
class Solution
{
    public:
    vector<string>ans; int n;
    vector<string> AllParenthesis(int m) 
    {
        n=m; string s; rec(0,0,s,0);
        return ans;
    }
    void rec(int i,int b,string s,int op){
        if(i==2*n){
            ans.push_back(s); return;
        }
        if(b==0){
            string temp=s;
            temp.push_back('('); rec(i+1,b+1,temp,op+1);
        }
       else if(b==n){
            string temp=s;
            temp.push_back(')'); rec(i+1,b-1,temp,op);
        }
        else{
            string temp=s; temp.push_back(')'); rec(i+1,b-1,temp,op);
            if(op<n){
                string temp=s;
            temp.push_back('('); rec(i+1,b+1,temp,op+1);
            }
        }
    }
};

// { Driver Code Starts.


int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		Solution ob;
		vector<string> result = ob.AllParenthesis(n); 
		sort(result.begin(),result.end());
		for (int i = 0; i < result.size(); ++i)
			cout<<result[i]<<"\n";
	}
	return 0; 
} 
  // } Driver Code Ends