class Solution {
public: 
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        vector<pair<int,double>>g[n];
        for(int i=0;i<edges.size();i++){
            g[edges[i][0]].push_back({edges[i][1],succProb[i]});
            g[edges[i][1]].push_back({edges[i][0],succProb[i]});
        }
        priority_queue<pair<double,int>>p; vector<double>dist(n,0.00); 
        p.push({1.00,start}); dist[start]=1.0;
        while(!p.empty()){
            auto cur=p.top();p.pop();  
            for(auto i:g[cur.second]){  
                if(dist[cur.second]*i.second>dist[i.first]){
                    dist[i.first]=i.second*dist[cur.second];
                    p.push({dist[i.first],i.first});
                }
            }
        }
                
        return dist[end];
    } 
};