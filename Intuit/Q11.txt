/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/

class Solution {
public:
    Node* construct(vector<vector<int>>& grid) {
        Node* ans=new Node(); int n=grid.size(),o=0,z=0,m=n/2;            
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(!grid[i][j]){
                    z++;
                }
                else o++;
            }
        }
        if(!o){
            ans->isLeaf=true,ans->val=false; 
        }
        else if(!z){
             ans->isLeaf=true,ans->val=true;  
        }
        else{
            vector<vector<int>>a(m),b(m),c(m),d(m); vector<int>t(m,0);
        for(int i=0;i<m;i++) a[i]=t,b[i]=t,c[i]=t,d[i]=t;
            for(int i=0;i<n/2;i++){
                for(int j=0;j<n/2;j++){
                    a[i][j]=grid[i][j]; b[i][j]=grid[i][j+m];
                    c[i][j]=grid[i+m][j]; d[i][j]=grid[i+m][j+m];
                }
            }
            ans->topLeft = construct(a); ans->topRight=construct(b);
            ans->bottomLeft=construct(c); ans->bottomRight=construct(d);
        }
        return ans;
    }
};