// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
    vector<int>g[100001],visited; int f=0;
	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	     visited=vector<int>(N,0); 
	    for(auto i:prerequisites){
	        g[i.second].push_back(i.first); 
	        if(i.first==i.second) return false;
	    }
	    for(int i=0;i<N;i++){
	        if(!visited[i]){ 
	            bfs(i);  if(f) return false;
	        }
	    }
	    return true;
	}
	void bfs(int v){
	    visited[v]=1;
	    for(auto i:g[v]){
	        if(!visited[i]) bfs(i);
	        else if(visited[i]==1){
	            f=1; return;
	        }
	    } visited[v]=2;
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
    	int N, P;
        vector<pair<int, int> > prerequisites;
        cin >> N;
        cin >> P;
        for (int i = 0; i < P; ++i) {
            int x, y;
            cin >> x >> y;
            prerequisites.push_back(make_pair(x, y));
        }
        // string s;
        // cin>>s;
        Solution ob;
        if (ob.isPossible(N, prerequisites))
            cout << "Yes";
        else
            cout << "No";
        cout << endl;
	}
	return 0;
}  // } Driver Code Ends